<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Analytics on Lagging Indicators</title>
    <link>http://localhost:1313/tags/analytics/</link>
    <description>Recent content in Analytics on Lagging Indicators</description>
    <generator>Hugo -- 0.142.0</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Sep 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/analytics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Lessons learned on dashboard design for early-stage apps</title>
      <link>http://localhost:1313/posts/lessons-learned-on-dashboard-design-for-early-stage-apps/</link>
      <pubDate>Sat, 07 Sep 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/lessons-learned-on-dashboard-design-for-early-stage-apps/</guid>
      <description>&lt;p&gt;What follows are a few takeaways from a recent app launch, where I had some successes and some things I had to fix. I also maintain dashboards for a wide set of clients on a different project that will be overhauled soon, and would like to apply these learnings during the redesign.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;The three guiding business questions for initial design are:&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;How are we getting users?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;What our users are finding value in when using the application?&lt;/p&gt;</description>
    </item>
    <item>
      <title>Joint &amp;amp; conditional probabilities with pd.crosstab</title>
      <link>http://localhost:1313/posts/joint-conditional-probabilities-with-pd-crosstab/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/joint-conditional-probabilities-with-pd-crosstab/</guid>
      <description>&lt;p&gt;&lt;code&gt;pd.crosstab&lt;/code&gt; is one of those built-in functions in the Pandas API that I forget about routinely. I instinctively reached for &lt;code&gt;df.groupby(&#39;x&#39;)[&#39;y&#39;].count().unstack()&lt;/code&gt;, but when I wanted to normalize the values, it takes &lt;a href=&#34;https://stackoverflow.com/questions/37818063/how-to-calculate-conditional-probability-of-values-in-dataframe-pandas-python&#34;&gt;more and more steps&lt;/a&gt; to get where I wanted.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://lisds.github.io/textbook/useful-pandas/crosstab.html&#34;&gt;This was a nice straightforward overview&lt;/a&gt; of the &lt;code&gt;pd.crosstab&lt;/code&gt; function. To document for myself, below, create a sample correlated &lt;code&gt;DataFrame&lt;/code&gt; with integer columns &lt;code&gt;ActiveUsers&lt;/code&gt; and &lt;code&gt;CompletedProfile&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; pd
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; np
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# following code from Github Copilot&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;seed(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;n &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Number of samples&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;p &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.7&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Probability of True in the first column&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;rho &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0.8&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;# Correlation&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;col1 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;], size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n, p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[p, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;p])
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;col2 &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;where(col1, np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;], size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n, p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[rho, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rho]), 
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;         np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;random&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;choice([&lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt;, &lt;span style=&#34;color:#66d9ef&#34;&gt;False&lt;/span&gt;], size&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n, p&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;rho, rho]))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ActiveUsers&amp;#39;&lt;/span&gt;: col1, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;CompletedProfile&amp;#39;&lt;/span&gt;: col2})
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure&gt;
&lt;table class=&#34;has-fixed-layout&#34;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;ActiveUsers&lt;/td&gt;&lt;td&gt;CompletedProfile&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;0&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;&lt;td&gt;True&lt;/td&gt;&lt;td&gt;False&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;&lt;td&gt;...&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;
&lt;figcaption&gt;
&lt;p&gt;Sample of the constructed DataFrame&lt;/p&gt;</description>
    </item>
    <item>
      <title>Identifying outbound IP addresses of a Azure Function</title>
      <link>http://localhost:1313/posts/identifying-outbound-ip-addresses-of-a-azure-function/</link>
      <pubDate>Wed, 01 May 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/identifying-outbound-ip-addresses-of-a-azure-function/</guid>
      <description>&lt;p&gt;Here is &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/ip-addresses?tabs=portal&#34;&gt;Microsoft&amp;rsquo;s documentation page on the topic&lt;/a&gt;. The only reason I am documenting this is because the Azure Resource Explorer failed to load consistently across devices for me. Some tutorials I found, like &lt;a href=&#34;https://rubberduckdev.com/app-outbound-ip/&#34;&gt;this one&lt;/a&gt;, seem to be outdated and the outbound IP addresses weren&amp;rsquo;t listed in any Properties menu in the Function App in the Azure Portal. The Azure CLI method was what worked for me:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;az functionapp show --resource-group &amp;lt;GROUP_NAME&amp;gt; --name &amp;lt;APP_NAME&amp;gt; --query outboundIpAddresses --output tsv
az functionapp show --resource-group &amp;lt;GROUP_NAME&amp;gt; --name &amp;lt;APP_NAME&amp;gt; --query possibleOutboundIpAddresses --output tsv
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I wanted this as I was hoping to whitelist the IP addresses in the database firewall to allow for scheduling some SQL scripts to run daily. The issue with this is the following, copied from the above linked Microsoft documentation: &amp;ldquo;because of autoscaling behaviors, the outbound IP can change at any time when running on a &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/consumption-plan&#34;&gt;Consumption plan&lt;/a&gt; or in a &lt;a href=&#34;https://learn.microsoft.com/en-us/azure/azure-functions/functions-premium-plan&#34;&gt;Premium plan&lt;/a&gt;.&amp;rdquo; While at least a few people say &lt;a href=&#34;https://stackoverflow.com/questions/49109310/how-to-allow-azure-function-to-access-database-hosted-on-azure-vm&#34;&gt;whitelist these IPs anyway&lt;/a&gt;, the recommended course of action is to set up a virtual network within Azure.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SNAP State Performance Indicators Datasets</title>
      <link>http://localhost:1313/posts/snap-state-performance-indicators-datasets/</link>
      <pubDate>Wed, 21 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/snap-state-performance-indicators-datasets/</guid>
      <description>&lt;p&gt;I started to post &lt;a href=&#34;https://www.fns.usda.gov/snap/efficiency-effectiveness-measures&#34;&gt;SNAP performance indicators&lt;/a&gt; from the USDA in machine-readable format, aggregating and cleaning the data from the many PDF tables. &lt;a href=&#34;https://github.com/leppekja/SNAP-performance-indicators&#34;&gt;This repository&lt;/a&gt; includes quick-access to cleaned, FIPS-linked CSV long-format tables of yearly state reported indicators for &lt;a href=&#34;https://www.fns.usda.gov/snap/qc/timeliness&#34;&gt;Application Processing Timeliness&lt;/a&gt;, &lt;a href=&#34;https://www.fns.usda.gov/snap/qc/per&#34;&gt;Program Error Rates&lt;/a&gt;, and &lt;a href=&#34;https://www.fns.usda.gov/snap/qc/caper&#34;&gt;Case and Procedural Error Rates&lt;/a&gt; (coming soon).&lt;/p&gt;
&lt;p&gt;USDA Descriptions as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Application Processing Timeliness &amp;ldquo;measures the timeliness of states’ processing of initial SNAP applications. The Food and Nutrition Act of 2008 entitles all eligible households to SNAP benefits within 30 days of application, or within 7 days, if they are eligible for expedited service.&amp;rdquo;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Friday Links</title>
      <link>http://localhost:1313/posts/friday-links/</link>
      <pubDate>Sat, 10 Feb 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/friday-links/</guid>
      <description>&lt;p&gt;- A series of YouTube videos on how &amp;ldquo;practical effects&amp;rdquo; in movies are highlighted by directors, actors, and viewers, but actually are building blocks to extremely realistic computer generated visual effects. I didn&amp;rsquo;t even realize much of what he showed was technically possible: it makes sense that performing a stunt in real life can give VFX artists valuable information about how it should look when it is computer generated, but the fact that oftentimes the stunt itself is replaced with CGI is astounding; see, for instance, the Top Gun: Maverick replacement jets.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
